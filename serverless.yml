service: todo-app

frameworkVersion: "3"

plugins:
  - serverless-s3-sync

package:
  individually: true
  patterns:
    - "!./**"

custom:
  s3Sync:
    - bucketName: ${self:service}-${sls:stage}
      localDir: frontend/out

provider:
  region: ap-northeast-1
  name: aws
  runtime: nodejs18.x
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - dynamodb:BatchGetItem
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:BatchWriteItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: arn:aws:dynamodb:ap-northeast-1:*:table/Todos*
  environment:
    NODE_ENV: production
    WEB_SITE_URL:
      Fn::Join:
        - ""
        - - "https://"
          - !GetAtt CloudFrontDistribution.DomainName

resources:
  Resources:
    DynamoDBTableTodos:
      Type: "AWS::DynamoDB::Table"
      Properties: ${file(./backend/dynamodb/create-table.yml)}
    S3BucketStaticWebHosting:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${sls:stage}
    S3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: S3BucketStaticWebHosting
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action:
                - s3:GetObject
              Effect: Allow
              Resource:
                Fn::Sub: ${S3BucketStaticWebHosting.Arn}/*
              Principal:
                Service:
                  - cloudfront.amazonaws.com
              Condition:
                StringEquals:
                  AWS:SourceArn:
                    Fn::Sub: arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}
    CloudFrontOriginAccessControl:
      Type: AWS::CloudFront::OriginAccessControl
      Properties:
        OriginAccessControlConfig:
          Name: OriginAccessControl
          OriginAccessControlOriginType: s3
          SigningBehavior: always
          SigningProtocol: sigv4
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          Origins:
            - Id:
                Fn::Sub: S3-${S3BucketStaticWebHosting}
              DomainName:
                Fn::Join:
                  - "."
                  - - Ref: S3BucketStaticWebHosting
                    - s3
                    - Ref: AWS::Region
                    - Ref: AWS::URLSuffix
              OriginAccessControlId:
                Ref: CloudFrontOriginAccessControl
              S3OriginConfig:
                OriginAccessIdentity: ""
          DefaultCacheBehavior:
            TargetOriginId:
              Fn::Sub: S3-${S3BucketStaticWebHosting}
            ViewerProtocolPolicy: https-only
            ForwardedValues:
              QueryString: false
          DefaultRootObject: index.html
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-user-pool
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
            RequireUppercase: false
        AutoVerifiedAttributes:
          - email
        EmailVerificationMessage: "Your verification code is {####}."
        EmailVerificationSubject: "Todo App Verification Code"
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-user-pool-client
        UserPoolId:
          Ref: CognitoUserPool
        SupportedIdentityProviders:
          - COGNITO
        CallbackURLs:
          - Fn::Join:
              - ""
              - - "https://"
                - !GetAtt CloudFrontDistribution.DomainName
        LogoutURLs:
          - Fn::Join:
              - ""
              - - "https://"
                - !GetAtt CloudFrontDistribution.DomainName
        AllowedOAuthFlows:
          - implicit
          - code
        AllowedOAuthScopes:
          - email
          - openid
        ExplicitAuthFlows:
          - ALLOW_ADMIN_USER_PASSWORD_AUTH
          - ALLOW_CUSTOM_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_USER_SRP_AUTH
        AllowedOAuthFlowsUserPoolClient: true
    CognitoUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: ${self:service}-${sls:stage}-auth
        UserPoolId: !Ref CognitoUserPool

  Outputs:
    WebSiteUrl:
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - !GetAtt CloudFrontDistribution.DomainName
    WebSiteDistributionArn:
      Value:
        Fn::Join:
          - ""
          - - "arn:aws:cloudfront::"
            - !Ref "AWS::AccountId"
            - ":distribution/"
            - !Ref CloudFrontDistribution
    CognitoUserPoolId:
      Value: !Ref CognitoUserPool
    CognitoUserPoolAppClientId:
      Value: !Ref CognitoUserPoolClient
    CognitoUserPoolDomain:
      Value:
        Fn::Join:
          - "."
          - - !Ref CognitoUserPoolDomain
            - "auth.ap-northeast-1.amazoncognito.com"

functions:
  api:
    handler: backend/dist/lambda.handler
    events:
      - http:
          method: any
          path: /{proxy+}
          authorizer:
            name: ${self:service}-api-authorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - CognitoUserPool
                - Arn
    package:
      patterns:
        - backend/dist/**
        - backend/node_modules/**
  allowCors:
    handler: allowCors/index.handler
    events:
      - http:
          method: options
          path: /{proxy+}
    package:
      patterns:
        - allowCors/index.js
